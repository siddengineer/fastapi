respone model 

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import List

app = FastAPI()

# Model for Item
class Item(BaseModel):
    name: str
    description: str = None
    price: float
    tax: float = None

# Fake database to store items
fake_items_db = []

# Create operation
@app.post("/items/", response_model=Item)
async def create_item(item: Item):
    fake_items_db.append(item)
    return item

# Read operation
@app.get("/items/", response_model=List[Item])
async def read_items():
    return fake_items_db

# Update operation
@app.put("/items/{item_id}", response_model=Item)
async def update_item(item_id: int, updated_item: Item):
    if item_id < 0 or item_id >= len(fake_items_db):
        raise HTTPException(status_code=404, detail="Item not found")
    
    fake_items_db[item_id] = updated_item
    return updated_item

# Delete operation
@app.delete("/items/{item_id}", response_model=Item)
async def delete_item(item_id: int):
    if item_id < 0 or item_id >= len(fake_items_db):
        raise HTTPException(status_code=404, detail="Item not found")
    
    deleted_item = fake_items_db.pop(item_id)
    return deleted_item


//-------------------------------------------------------------------------------------------------------------------

from fastapi import FastAPI

app = FastAPI()

@app.get("/hello")-
def read_hello():
    return {"message": "Hello, World!"}
//--------------------------------------------------------------------------------

Customizing Response Status Codes

from fastapi import FastAPI, HTTPException
from fastapi.responses import JSONResponse

app = FastAPI()

@app.get("/items/{item_id}", status_code=201)
def create_item(item_id: int):
    return {"item_id": item_id, "message": "Item created successfully"}
//-------------------------------------------------------------------------------------------------------------------

Error Handling with HTTPException

from fastapi import FastAPI, HTTPException

app = FastAPI()

@app.get("/items/{item_id}")
def get_item(item_id: int):
    if item_id != 1:
        raise HTTPException(status_code=404, detail="Item not found")
    return {"item_id": item_id, "name": "Item 1"}

//--------------------------------------------------------------------------------------------------------------
 Customizing Response with JSONResponse and Other Response Classe
FastAPI also provides built-in response classes, like JSONResponse, HTMLResponse, PlainTextResponse, etc. You can use these classes if you want more control over how the response is structure

from fastapi import FastAPI
from fastapi.responses import JSONResponse

app = FastAPI()

@app.get("/custom-response")
def custom_response():
    content = {"message": "This is a custom response"}
    return JSONResponse(content=content, status_code=202)
//----------------------------------------------------------------------------------------------------------------------------
 Handling Validation Errors Automatically
FastAPI automatically validates the request and response data using Pydantic models. If the request data doesn't match the expected model,
FastAPI returns an automatic 422 Unprocessable Entity error with details about what went wrong.

from pydantic import BaseModel
from fastapi import FastAPI

app = FastAPI()

class Item(BaseModel):
    name: str
    price: float

@app.post("/items/")
def create_item(item: Item):
    return {"name": item.name, "price": item.price}

//---------------------------------------------------------------------------------------------------------------------------------------------
Custom Response Models for Errors

from pydantic import BaseModel
from fastapi import FastAPI, HTTPException

app = FastAPI()

class ErrorResponse(BaseModel):
    message: str
    code: int

@app.get("/error-example")
def error_example():
    raise HTTPException(status_code=400, detail="Custom error message")

@app.exception_handler(HTTPException)
async def custom_http_exception_handler(request, exc: HTTPException):
    return JSONResponse(
        status_code=exc.status_code,
        content=ErrorResponse(message=exc.detail, code=exc.status_code).dict(),
    )

//-------------------------------------------------------------------------------------------------------------------------------

Importance of Error Handling in FastAPI
Error handling is a crucial aspect of building any API, including those built with FastAPI.
Proper error handling not only ensures that your API runs smoothly but also provides meaningful feedback 
to clients and helps maintain the integrity and stability of your application. Here’s why error handling is important in FastAPI:

1. User-Friendly Responses
Improved User Experience: When errors occur, providing clear, consistent, and informative error messages helps
end-users (or the client application) understand what went wrong. For example, if a user submits 
incomplete data or invalid inputs, the API should return an error that clearly explains the issue (e.g., “Missing required field: price”).

Prevents Confusion: Without proper error handling, users might receive vague or unhelpful responses, 
such as a generic 500 Internal Server Error without any context. Proper error handling ensures that users or developers can easily debug and fix issues.

2. Increased API Reliability
Graceful Failure: By anticipating and handling errors before they cause crashes or unexpected behavior,
you ensure your API can handle various failure scenarios gracefully. 
This is essential for a reliable system that doesn't stop functioning entirely due to a single failure.

Data Integrity: Error handling prevents errors from corrupting or interrupting important processes
, such as transactions, data processing, and external API calls.
For example, if a database operation fails, a well-handled error ensures the system doesn’t leave the database in an inconsistent state.

3. Security and Protection
Avoid Information Leakage: Without proper error handling, sensitive information (like stack traces or database query details) 
could be exposed to end users, which might provide attackers with insights into how to exploit vulnerabilities. 
FastAPI allows you to control exactly what information is exposed in error messages, ensuring that only the necessary details are revealed.

Control Error Visibility: You can control which errors are shown to users and which are logged for the development team to address,
preventing malicious users from gaining access to internal details.

4. Better Debugging and Maintenance
Traceable Errors: Proper error handling provides detailed logs for developers,
making it easier to diagnose and fix issues. By logging important error details (such as request data, stack traces, and error codes),
your development team can quickly locate the root cause and fix the problem without disrupting the user experience.

Improved Maintenance: With clear error messages and structured logging, maintaining the application becomes easier,
as developers can quickly pinpoint issues rather than trying to guess or reproduce the problem.

5. Flexible API Responses
Consistent API Response Format: By defining custom error response models (such as a structured error response model), 
you can ensure that all errors from your API follow the same format. 
This consistency makes it easier for front-end developers and consumers of the API to handle errors in a predictable manner.

Custom Error Handling: You can create different error responses for different kinds of errors,
giving you control over how each error is presented and which status code is returned.
For example, a validation error might return a 422 Unprocessable Entity status, while a database error might return a 500 Internal Server Error.

6. Improved API Documentation
OpenAPI Specifications: FastAPI generates interactive API documentation automatically using Swagger UI.
By adding appropriate error handling and status codes in your API, the documentation will reflect potential error cases.
This helps API consumers understand how the API behaves in various scenarios (e.g., success, validation errors, authentication issues).

Clearer Client Expectations: Clients and front-end developers can see, through API documentation, 
exactly what errors to expect from the API and how to handle them in their applications.

7. Compliance with Standards and Best Practices
Adherence to HTTP Status Codes: FastAPI allows you to use appropriate HTTP status codes to indicate the result of an operation, whether it was successful,
failed due to client-side issues, or failed due to server-side errors. This makes your API more compliant with standards, such as RESTful principles, and more predictable.

Structured Error Handling: Adopting best practices for error handling, 
such as using HTTPException for specific error scenarios or returning well-defined error models, 
makes your API more maintainable and consistent with industry standards.

8. Handling Edge Cases and Unforeseen Errors
Catch Unexpected Issues: Proper error handling in FastAPI allows you to catch unexpected issues such as database failures,
network errors, or unanticipated input formats. If you don’t handle these errors explicitly, your application might crash or behave unpredictably.

Fallback and Recovery: In some cases, error handling allows your application to gracefully fall back to a
secondary operation or provide a default response. For example, if a third-party service is down, 
you might return a cached result or a fallback response rather than crashing the entire system.

9. FastAPI’s Built-in Features for Error Handling
FastAPI provides several tools to help with error handling:

//--------------------------------------------------------------------------------------
HTTPException: This is the most common way to handle errors in FastAPI. It allows you to specify an HTTP status code, an error detail, and other fields.

from fastapi import HTTPException

raise HTTPException(status_code=404, detail="Item not found")

//-----------------------------------------------------------------------------------

Custom Exception Handlers: FastAPI lets you define custom exception handlers to catch specific exceptions and return structured responses, 
making your error handling more flexible and organized.


from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse

app = FastAPI()

@app.exception_handler(HTTPException)
async def custom_http_exception_handler(request: Request, exc: HTTPException):
    return JSONResponse(
        status_code=exc.status_code,
        content={"message": f"Custom Error: {exc.}"}
    )

//---------------------------------------------------------------------------------------------------
Validation Errors: FastAPI automatically returns 422 Unprocessable Entity for validation errors, making it easy to catch and debug client-side issues.

Custom Error Models: You can define structured error responses with Pydantic models to give consumers clear and predictable error formats.


from pydantic import BaseModel
from fastapi import HTTPException

class ErrorResponse(BaseModel):
    message: str
    code: int

raise HTTPException(status_code=400, detail=ErrorResponse(message="Invalid input", code=400).dict())
//-------------------------------------------------------------------------------------------------------

Conclusion
Error handling is critical for building robust, user-friendly, and maintainable APIs.
FastAPI offers built-in tools like HTTPException, custom exception handling, and automatic validation error responses, allowing you to:

Provide clear and consistent error messages to users.

Ensure your API handles errors gracefully without crashing.

Keep security and sensitive information protected.

Make debugging and maintenance easier with structured logging.

Improve documentation and client interaction with predictable error formats.

//--------------------------------------------------------------------------------------------------------------

 Returning Custom Headers with JSON Response:

from fastapi import FastAPI
from fastapi.responses import JSONResponse

app = FastAPI()

@app.get("/custom-header")
def custom_header():
    content = {"message": "This is a custom header response"}
    headers = {"X-Custom-Header": "HelloWorld"}
    return JSONResponse(content=content, headers=headers)
//--------------------------------------------
. Handling JSON Body in POST Requests:


from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class User(BaseModel):
    name: str
    age: int
    email: str

@app.post("/user/")
def create_user(user: User):
    return {"message": "User created", "user": user}
//---------------------------------------------------

Handling JSON Body in POST Requests:

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class User(BaseModel):
    name: str
    age: int
    email: str

@app.post("/user/")
def create_user(user: User):
    return {"message": "User created", "user": user}

//-----------------------------------------------------------

Using Pydantic Models for JSON Responses

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class User(BaseModel):
    name: str
    age: int
    email: str

@app.get("/user", response_model=User)
def get_user():
    return {"name": "John Doe", "age": 30, "email": "john@example.com"}


//--------------------------------------------------------------------
: Use ORJSONResponse in FastAPI

from fastapi import FastAPI
from fastapi.responses import ORJSONResponse

app = FastAPI()

@app.get("/orjson", response_class=ORJSONResponse)
def get_orjson_data():
    data = {
        "name": "John Doe",
        "age": 30,
        "email": "john@example.com"
    }
    return data  # FastAPI will use ORJSONResponse for this route
//--------------------------------------------------------------------


Customizing Response with ORJSONResponse
from fastapi import FastAPI
from fastapi.responses import ORJSONResponse

app = FastAPI()

@app.get("/custom-orjson", response_class=ORJSONResponse)
def custom_orjson_response():
    data = {"message": "Hello, FastAPI with ORJSON!", "status": "success"}
    headers = {"X-Custom-Header": "This is a custom header"}
    return ORJSONResponse(content=data, status_code=200, headers=headers)
//--------------------------------------------------------------------------------

4. Handling Custom Data Types with ORJSONResponse


from fastapi import FastAPI
from fastapi.responses import ORJSONResponse
from datetime import datetime

app = FastAPI()

@app.get("/datetime-orjson", response_class=ORJSONResponse)
def datetime_orjson_response():
    data = {
        "current_time": datetime.now(),
        "message": "This is a datetime response"
    }
    return data  ORJSON handles datetime serialization natively
//-----------------------------------------------------------------------------------

 Setting ORJSONResponse as Default

from fastapi import FastAPI
from fastapi.responses import ORJSONResponse

app = FastAPI(default_response_class=ORJSONResponse)

@app.get("/default-orjson")
def default_orjson_response():
    data = {"message": "This uses ORJSONResponse by default"}
    return data  # ORJSONResponse is used automatically
//---------------------------------------------------------------------------

from fastapi import FastAPI
from fastapi.responses import ORJSONResponse
from datetime import datetime

app = FastAPI()

@app.get("/datetime-orjson", response_class=ORJSONResponse)
def datetime_orjson_response():
    # Convert datetime to string in ISO 8601 format
    data = {
        "current_time": datetime.now().isoformat(),  # Convert to ISO 8601 string format
        "message": "This is a datetime response"
    }
    return data  # ORJSONResponse will handle this data efficiently
//--------------------------------------------------------------------------

In FastAPI, streaming responses allow you to send large data (like files or chunks of data) to clients in smaller pieces, without having to load everything into memory at once. This is particularly useful for sending large files, like video, audio, or large datasets.

FastAPI provides a built-in class called StreamingResponse to handle such use cases.

Key Concepts:
StreamingResponse is used to stream data in chunks.

You typically pass a file-like object (such as a generator or an open file) to StreamingResponse.

FastAPI supports streaming of various types of data like files, large datasets, or real-time data.

Example: Streaming a File in FastAPI
Here's an example of how you can stream a file (e.g., a large text file) to a client:

1. Streaming a Text File
python
Copy
from fastapi import FastAPI
from fastapi.responses import StreamingResponse
import io

app = FastAPI()

# Example file (simulating large file)
@app.get("/stream-text-file")
def stream_text_file():
    def generate_file():
        # Simulating reading a large file
        with open("large_file.txt", "r") as f:
            while chunk := f.read(1024):  # Reading the file in chunks of 1024 bytes
                yield chunk  # Yield the next chunk of data

    return StreamingResponse(generate_file(), media_type="text/plain")
Explanation:
generate_file is a Python generator that reads the file in chunks (e.g., 1024 bytes at a time).

The StreamingResponse takes this generator and streams the content to the client.

media_type="text/plain" specifies that the content type is plain text (this can be changed based on the file type you are streaming).

2. Streaming a File Directly
If you want to stream a file directly, for example, a large image or video file, here's how you can do it:

python
Copy
from fastapi import FastAPI
from fastapi.responses import StreamingResponse
import os

app = FastAPI()

@app.get("/stream-video")
def stream_video():
    video_path = "large_video.mp4"
    file_like = open(video_path, mode="rb")  # Open the video file in binary mode
    return StreamingResponse(file_like, media_type="video/mp4")
Explanation:
open(video_path, mode="rb"): Opens the video file in binary read mode.

StreamingResponse(file_like, media_type="video/mp4"): Streams the video as a response with the appropriate content type (in this case, video/mp4).

3. Adding Chunked Transfer Encoding
You can also control how data is sent in chunks by setting headers for chunked transfer encoding. FastAPI will handle the chunking for you automatically, but you can explicitly control it if needed.

python
Copy
from fastapi import FastAPI
from fastapi.responses import StreamingResponse

app = FastAPI()

@app.get("/stream-chunks")
async def stream_chunks():
    def generate_data():
        # Simulating a data stream
        for i in range(5):
            yield f"Chunk {i}\n"
    
    return StreamingResponse(generate_data(), media_type="text/plain")
In this case, the response will contain 5 "chunks" of data as the client streams it.

Advantages of Streaming Responses:
Reduced Memory Usage: Instead of loading large data into memory all at once, you can stream it incrementally, which is especially helpful for large files.

Improved Performance: The client can start receiving and processing the data without waiting for the entire file to be loaded into memory or transmitted.

Real-time Data: Streaming responses are also useful for real-time data, like video or live logs.

Summary:
StreamingResponse in FastAPI is used to stream large files or data in chunks.

It accepts a file-like object (like a generator or an open file) and streams it to the client.

It supports various media types depending on the content you're streaming (e.g., video/mp4, text/plain, etc.).

//--------------------------------------------------------------------------------------------------------------------------------








