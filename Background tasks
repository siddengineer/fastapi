FastAPI provides a simple and effective way to handle background tasks using the BackgroundTasks class.
Background tasks are used to perform work asynchronously without blocking the main thread or making the user wait for completion, such as sending emails, processing data, or calling an external service.
Email notifications sent after performing an action:
As connecting to an email server and sending an email tends to be "slow" (several seconds), you can return the response right away and send the email notification in the background.


from fastapi import BackgroundTasks, FastAPI

app = FastAPI()


def write_notification(email: str, message=""):
    with open("log.txt", mode="w") as email_file:
        content = f"notification for {email}: {message}"
        email_file.write(content)


@app.post("/send-notification/{email}")
async def send_notification(email: str, background_tasks: BackgroundTasks):
    background_tasks.add_task(write_notification, email, message="some notification")
    return {"message": "Notification sent in the background"}


Add the background taskÂ¶
Inside of your path operation function, pass your task function to the background tasks object with the method .add_task():
from fastapi import BackgroundTasks, FastAPI

app = FastAPI()


def write_notification(email: str, message=""):
    with open("log.txt", mode="w") as email_file:
        content = f"notification for {email}: {message}"
        email_file.write(content)


@app.post("/send-notification/{email}")
async def send_notification(email: str, background_tasks: BackgroundTasks):
    background_tasks.add_task(write_notification, email, message="some notification")
    return {"message": "Notification sent in the background"}





dependency injection

from fastapi import FastAPI, BackgroundTasks
import time
import smtplib
from email.mime.text import MIMEText

app = FastAPI()

def send_email(email: str, message: str):
    # Simulate sending email
    time.sleep(5)  # Simulate network delay
    msg = MIMEText(message)
    msg['Subject'] = 'Background Task Example'
    msg['From'] = 'example@example.com'
    msg['To'] = email
    
    # Fake email sending (this can be replaced with actual SMTP code)
    print(f"Sent email to {email} with message: {message}")

@app.post("/send-email/")
async def send_email_task(background_tasks: BackgroundTasks, email: str):
    message = "Your background task has been completed."
    background_tasks.add_task(send_email, email, message)
    return {"message": "Email will be sent in the background"}


//----------------------------------------------------------------------------6. Using Background Tasks with Time-Consuming Operations
For long-running tasks (e.g., large file processing, calling third-party APIs), you can use background tasks without impacting the user experience.

from fastapi import FastAPI, BackgroundTasks
import shutil

app = FastAPI()

def process_file(file_path: str):
    time.sleep(10)  # Simulate file processing time
    shutil.move(file_path, "processed_files/")

@app.post("/process-file/")
async def process_file_task(background_tasks: BackgroundTasks, file_path: str):
    background_tasks.add_task(process_file, file_path)
    return {"message": "File is being processed in the background"}
//----------------------------------------------------------------------------------------------------------
7. Error Handling and Logging in Background Tasks
If you have long-running or critical tasks, it's important to handle errors and log them for debugging.

from fastapi import FastAPI, BackgroundTasks
import logging

app = FastAPI()

logging.basicConfig(level=logging.INFO)

def background_task_with_error_handling(name: str):
    try:
        if name == "fail":
            raise ValueError("Simulated error")
        logging.info(f"Task completed for {name}")
    except Exception as e:
        logging.error(f"Error occurred: {e}")

@app.post("/run-task/")
async def run_background_task(background_tasks: BackgroundTasks, name: str):
    background_tasks.add_task(background_task_with_error_handling, name)
    return {"message": "Task is running in the background"}
//-------------------------------------------------------------------------------------------------------------------
Task Complexity: Keep the tasks in the background short and manageable to avoid overwhelming the system.

Logging: Use proper logging mechanisms to track the task's progress and errors.

Retries and Timeouts: For critical tasks, implement retry mechanisms or use third-party libraries like Celery for more advanced task management.

Queueing: If your background tasks require heavy queuing or managing many tasks, consider using tools like Redis or RabbitMQ with Celery.

Avoid Blocking: Do not use blocking calls like time.sleep() in background tasks unless absolutely necessary. Use asynchronous methods or background task-specific handling.

//-------------------------------------------------------------------------------------------------------------------------
9. Integration with Celery (Optional)
For more complex scenarios like handling many tasks, scheduling, retries, or timeouts, you may want to integrate Celery for background task management.

from fastapi import FastAPI
from celery import Celery

app = FastAPI()

celery_app = Celery('tasks', broker='redis://localhost:6379')

@celery_app.task
def process_data(data):
    # Long-running task
    return "Processed Data"

@app.post("/process-data/")
async def process_data_task(data: str):
    process_data.apply_async(args=[data])
    return {"message": "Data processing started"}
//------------------------------------------------------------------------------------------------------------------------


Email Notifications:

After a user registers or performs an action, a confirmation or welcome email is sent asynchronously in the background without delaying the user experience.

Data Processing:

Large datasets or complex calculations (e.g., image processing, data analysis) are processed in the background, allowing users to continue using the application without waiting.

File Uploads/Downloads:

Uploading or downloading large files can be handled in the background so users can continue using the app while the task completes.

Generating Reports:

When users request reports (e.g., PDF generation, data exports), the report is generated in the background, and the user is notified once the task is complete.

Sending Bulk SMS/Emails:

Sending notifications to thousands of users (e.g., marketing campaigns, transactional updates) is handled in the background, allowing for scalable and efficient processing.

Database Cleanup/Backups:

Periodic backups, data migrations, or cleanup tasks are done in the background so they don't affect the performance of the live system.

Image/Video Processing:

Tasks like resizing images, converting file formats, or transcoding videos are done asynchronously to avoid slowing down the web application


//=============================================================================================================================================

Project Idea: Background Task-Based Email Notification System
Project Overview:
Create a web application that allows users to register and, upon successful registration, receive a confirmation email sent asynchronously in the background. The system will use FastAPI for the web framework and BackgroundTasks for handling the email sending in the background.

Project Steps:
1. Set Up the FastAPI Application
Create a new FastAPI project.

bash
Copy
pip install fastapi uvicorn
Set up a basic FastAPI app with a POST endpoint for user registration.

2. Define Background Task to Send Email
Implement a background task to simulate sending an email.

Use the BackgroundTasks class from FastAPI to offload the email-sending process.

3. User Registration Endpoint
Create a user registration endpoint where users submit their details (like name, email).

The server should return a quick response while the email is being sent in the background.

4. Simulate Email Sending
For simplicity, simulate sending the email (you can print a message to the console or log it to a file).

You can later integrate a real email service like SMTP, SendGrid, or Mailgun.

Implementation:
Install Required Packages:


pip install fastapi uvicorn
Create a File app.py for FastAPI Application:


from fastapi import FastAPI, BackgroundTasks
from pydantic import BaseModel
import time

app = FastAPI()

# Define Pydantic model for user registration
class User(BaseModel):
    email: str
    name: str

# Background task to simulate email sending
def send_email(email: str, name: str):
    # Simulate a time-consuming task like sending an email
    time.sleep(5)
    print(f"Sent email to {name} ({email}) - Welcome to our platform!")

# User registration endpoint
@app.post("/register/")
async def register_user(user: User, background_tasks: BackgroundTasks):
    # Trigger the background task
    background_tasks.add_task(send_email, user.email, user.name)
    return {"message": "User registered successfully. A confirmation email is being sent!"}
Run the Application:


uvicorn app:app --reload
Test the Application:

Send a POST request to /register/ with the following JSON payload:

{
  "email": "user@example.com",
  "name": "John Doe"
}
The server will respond immediately with a success message, and after 5 seconds (simulating email sending), the email-sending task will be logged to the console.

