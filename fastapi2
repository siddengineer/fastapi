1. Set Up the FastAPI App
Start by importing necessary modules and creating the FastAPI app.

Code:
python
Copy
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import List

app = FastAPI()
Explanation:
FastAPI: The main class that initializes the API app.
HTTPException: Used to raise errors with a custom status code and message.
BaseModel: Used to define request and response models using Pydantic (for validation).
List: To handle lists of items (for example, returning multiple books).
2. Define the Book Model (Pydantic)
You need to define the data model for the books so that FastAPI knows what data to expect for creating and displaying books.

Code:
python
Copy
class Book(BaseModel):
    title: str
    author: str
    price: float
    published_year: int
    isbn: str
Explanation:
BaseModel: Pydantic’s BaseModel is used to define the fields and validation for your data models.
Book Fields:
title: The title of the book (string).
author: The author of the book (string).
price: Price of the book (float).
published_year: The year the book was published (integer).
isbn: The book's ISBN number (string).
3. In-Memory Fake Database
Now, let’s create a simulated in-memory database (using a Python dictionary) to store the books.

Code:
python
Copy
fake_db = {
    1: Book(
        title="The Great Gatsby",
        author="F. Scott Fitzgerald",
        price=10.99,
        published_year=1925,
        isbn="9780743273565"
    ),
    2: Book(
        title="1984",
        author="George Orwell",
        price=8.99,
        published_year=1949,
        isbn="9780451524935"
    ),
    3: Book(
        title="To Kill a Mockingbird",
        author="Harper Lee",
        price=7.99,
        published_year=1960,
        isbn="9780061120084"
    )
}
Explanation:
fake_db: This dictionary acts as an in-memory database where book IDs are the keys, and the Book data is stored as values.
Each book in the fake_db has an ID (starting from 1) and contains information about the title, author, price, published year, and ISBN.
4. Creating a Book (POST Route)
The POST route allows users to create a new book. This will add the book to the fake_db.

Code:
python
Copy
@app.post("/books/", response_model=Book)
def create_book(book: Book):
    book_id = len(fake_db) + 1  # Simple auto-increment ID
    fake_db[book_id] = book
    return {"message": "Book created successfully!", "book_id": book_id, "book": book}
Explanation:
POST /books/: This route is used for creating a new book.
book: Book: This is the input data for creating a new book. FastAPI will automatically parse and validate the request body based on the Book model.
Auto-increment book_id: We calculate the new book_id by getting the length of fake_db and adding 1 to it. This makes sure each book gets a unique ID.
Response: We return a success message and the book_id of the newly created book.
5. Retrieving a Book by ID (GET Route)
This route allows users to retrieve a book by its ID. If the book ID doesn't exist, we return a 404 error with a custom message.

Code:
python
Copy
@app.get("/books/{book_id}", response_model=Book)
def read_book(book_id: int):
    book = fake_db.get(book_id)
    if book:
        return book
    raise HTTPException(status_code=404, detail="Book not found")
Explanation:
GET /books/{book_id}: This route retrieves a book by its unique book_id.
book = fake_db.get(book_id): We look for the book in fake_db using the provided book_id.
Error Handling: If the book_id is not found in fake_db, we raise a 404 HTTPException with the message "Book not found".
6. Updating a Book (PUT Route)
This route allows users to update an existing book by its book_id.

Code:
python
Copy
@app.put("/books/{book_id}", response_model=Book)
def update_book(book_id: int, book: Book):
    if book_id in fake_db:
        fake_db[book_id] = book
        return book
    raise HTTPException(status_code=404, detail="Book not found")
Explanation:
PUT /books/{book_id}: This route updates a book with the provided book_id.
Check if book_id exists: Before updating the book, we check if the book_id exists in fake_db.
Update: If the book exists, we replace the old book with the new one provided in the request body.
Error Handling: If the book_id is not found, we return a 404 error.
7. Deleting a Book (DELETE Route)
This route allows users to delete a book from the fake_db using the book_id.

Code:
python
Copy
@app.delete("/books/{book_id}")
def delete_book(book_id: int):
    if book_id in fake_db:
        del fake_db[book_id]
        return {"message": f"Book with ID {book_id} deleted successfully!"}
    raise HTTPException(status_code=404, detail="Book not found")
Explanation:
DELETE /books/{book_id}: This route deletes a book by its book_id.
Check if book_id exists: We check if the book_id exists in fake_db.
Delete: If the book exists, we remove it from fake_db using del.
Error Handling: If the book_id is not found, we return a 404 error.
8. Retrieve All Books (GET Route)
This route allows users to retrieve a list of all books in the fake_db.

Code:
python
Copy
@app.get("/books/", response_model=List[Book])
def read_books():
    return list(fake_db.values())
Explanation:
GET /books/: This route retrieves all the books in the fake_db.
Return All Books: We use list(fake_db.values()) to get all the books in the dictionary as a list.
Response: A list of all books will be returned.
Summary of How to Write FastAPI Routes
Set Up FastAPI App: Import FastAPI, HTTPException, and any necessary models.
Define Models: Use Pydantic (BaseModel) to define the shape of the data you expect (e.g., Book).
Create Routes:
Use @app.get, @app.post, @app.put, and @app.delete to define your API endpoints.
Handle input and output with Pydantic models (for request validation and response serialization).
Handle Errors: Use HTTPException to raise errors with custom status codes and messages.
Use In-Memory or Real Database: For testing, use an in-memory database like a dictionary (fake_db). For production, connect to a real database.



from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import List

app = FastAPI()

# Define a Pydantic model for the Book
class Book(BaseModel):
    title: str
    author: str
    price: float
    published_year: int
    isbn: str

# In-memory database (pre-filled data)
fake_db = {
    1: Book(
        title="The Great Gatsby",
        author="F. Scott Fitzgerald",
        price=10.99,
        published_year=1925,
        isbn="9780743273565"
    ),
    2: Book(
        title="1984",
        author="George Orwell",
        price=8.99,
        published_year=1949,
        isbn="9780451524935"
    ),
    3: Book(
        title="To Kill a Mockingbird",
        author="Harper Lee",
        price=7.99,
        published_year=1960,
        isbn="9780061120084"
    )
}

# POST route: Create a new book
@app.post("/books/", response_model=Book)
def create_book(book: Book):
    book_id = len(fake_db) + 1  # Simple auto-increment ID
    fake_db[book_id] = book
    return {"message": "Book created successfully!", "book_id": book_id, "book": book}

# PUT route: Update an existing book by ID
@app.put("/books/{book_id}", response_model=Book)
def update_book(book_id: int, book: Book):
    if book_id in fake_db:
        fake_db[book_id] = book
        return book
    raise HTTPException(status_code=404, detail="Book not found")

# DELETE route: Delete a book by ID
@app.delete("/books/{book_id}")
def delete_book(book_id: int):
    if book_id in fake_db:
        del fake_db[book_id]
        return {"message": f"Book with ID {book_id} deleted successfully!"}
    raise HTTPException(status_code=404, detail="Book not found")

# GET route: Get a book by ID
@app.get("/books/{book_id}", response_model=Book)
def read_book(book_id: int):
    book = fake_db.get(book_id)
    if book:
        return book
    raise HTTPException(status_code=404, detail="Book not found")

# GET route: Get a list of all books
@app.get("/books/", response_model=List[Book])
def read_books():
    return list(fake_db.values())


















1. Structure Your Code into Modules/Packages
In a professional setting, you would modularize your code to keep it organized and maintainable. For example, you could break your code into multiple files for different purposes, such as:

models.py: Contains all your Pydantic models.
schemas.py: Defines request and response schemas.
db.py: Handles database interactions (this could be a real database instead of fake_db).
routes.py: Defines the API endpoints (separate from the business logic).
main.py: The entry point that runs your FastAPI app.
This structure keeps your code clean and easy to navigate for large projects with many endpoints.

2. Use a Real Database
In a production environment, you would likely use a real database (e.g., PostgreSQL, MySQL, MongoDB) instead of an in-memory database. For this, you will need to:

Use an ORM (Object-Relational Mapping) like SQLAlchemy for relational databases or Motor for MongoDB.
Set up a database connection and ensure that the app can handle multiple connections in a scalable way.
Here’s an example setup using SQLAlchemy with PostgreSQL:

db.py (Database Configuration)
python
Copy
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

# Connect to the database (PostgreSQL example)
SQLALCHEMY_DATABASE_URL = "postgresql://user:password@localhost/dbname"

# Create engine and session
engine = create_engine(SQLALCHEMY_DATABASE_URL, connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# Declare the base class for ORM models
Base = declarative_base()
models.py (SQLAlchemy Models)
python
Copy
from sqlalchemy import Column, Integer, String, Float
from .db import Base

class Book(Base):
    __tablename__ = "books"

    id = Column(Integer, primary_key=True, index=True)
    title = Column(String, index=True)
    author = Column(String)
    price = Column(Float)
    published_year = Column(Integer)
    isbn = Column(String)
crud.py (Database Operations)
python
Copy
from sqlalchemy.orm import Session
from . import models

def get_book(db: Session, book_id: int):
    return db.query(models.Book).filter(models.Book.id == book_id).first()

def create_book(db: Session, title: str, author: str, price: float, published_year: int, isbn: str):
    db_book = models.Book(title=title, author=author, price=price, published_year=published_year, isbn=isbn)
    db.add(db_book)
    db.commit()
    db.refresh(db_book)
    return db_book
3. Use Dependency Injection for Database Session
FastAPI has a powerful dependency injection system that can be used to inject things like a database session into your endpoints, ensuring clean code and separation of concerns.

dependencies.py (Database Dependency)
python
Copy
from fastapi import Depends
from sqlalchemy.orm import Session
from .db import SessionLocal

# Dependency to get the DB session
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()
In Your Routes (routes.py):
python
Copy
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from . import crud, schemas, dependencies

router = APIRouter()

# Endpoint to retrieve a book by ID
@router.get("/books/{book_id}", response_model=schemas.Book)
def read_book(book_id: int, db: Session = Depends(dependencies.get_db)):
    db_book = crud.get_book(db, book_id)
    if db_book is None:
        raise HTTPException(status_code=404, detail="Book not found")
    return db_book

# Endpoint to create a new book
@router.post("/books/", response_model=schemas.Book)
def create_book(book: schemas.BookCreate, db: Session = Depends(dependencies.get_db)):
    return crud.create_book(db, book.title, book.author, book.price, book.published_year, book.isbn)
4. Use Environment Variables for Configuration
In a production environment, you should not hard-code sensitive information like database credentials, secret keys, etc. Instead, use environment variables or configuration files.

For example, use the python-dotenv package to load environment variables:

.env File
ini
Copy
DATABASE_URL=postgresql://user:password@localhost/dbname
SECRET_KEY=your-secret-key
settings.py (Loading Environment Variables)
python
Copy
from pydantic import BaseSettings

class Settings(BaseSettings):
    database_url: str
    secret_key: str

    class Config:
        env_file = ".env"

settings = Settings()
You can then use settings.database_url and settings.secret_key in your code instead of hardcoding them.

5. API Versioning
In professional projects, especially in large organizations, API versioning is crucial to maintain backward compatibility as your API evolves over time. FastAPI makes it easy to version your API routes.

Example of Versioning:
python
Copy
from fastapi import FastAPI, APIRouter

app = FastAPI()

v1_router = APIRouter()

@v1_router.get("/books/")
def get_books():
    return {"message": "Books for version 1"}

v2_router = APIRouter()

@v2_router.get("/books/")
def get_books_v2():
    return {"message": "Books for version 2"}

app.include_router(v1_router, prefix="/v1")
app.include_router(v2_router, prefix="/v2")
Now you can have different versions of your API, like /v1/books/ and /v2/books/, and you can continue evolving the API while maintaining backward compatibility for older clients.

6. Logging and Monitoring
In a production setting, you should always implement logging and monitoring to track application health, performance, and errors.

Example of Logging:
python
Copy
import logging

# Set up logger
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@app.get("/books/{book_id}")
def get_book(book_id: int):
    logger.info(f"Fetching book with ID {book_id}")
    book = fake_db.get(book_id)
    if not book:
        logger.error(f"Book with ID {book_id} not found")
        raise HTTPException(status_code=404, detail="Book not found")
    return book
For monitoring, you can integrate tools like Prometheus or Datadog to track API performance and uptime.

7. Testing
In a production environment, automated testing is essential to ensure the stability of your code.

Writing Unit Tests with pytest:
You would typically use pytest to write tests for your FastAPI endpoints.

Example of a Test:
python
Copy
from fastapi.testclient import TestClient
from app.main import app

client = TestClient(app)

def test_read_books():
    response = client.get("/books/")
    assert response.status_code == 200
    assert len(response.json()) > 0
Running Tests:
bash
Copy
pytest
8. Security Considerations
In a professional environment, security is extremely important. For that, FastAPI provides built-in support for OAuth2, JWT tokens, and other security practices.

Example of OAuth2 Password Flow:
python
Copy
from fastapi import Depends, HTTPException
from fastapi.security import OAuth2PasswordBearer
from app import schemas

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

def get_current_user(token: str = Depends(oauth2_scheme)):
    # Verify token and get user information
    user = get_user_from_token(token)
    if not user:
        raise HTTPException(status_code=401, detail="Invalid credentials")
    return user

1. Understand HTTP Methods
GET: Used to retrieve data. Never modify data using GET requests. Always use GET for fetching resources.
POST: Used to create resources or perform actions that don’t fit into GET/PUT/DELETE. It’s often used for creating new entries (e.g., creating a book in a database).
DELETE: Used to remove a resource. Ensure proper error handling if the resource is not found.
2. Use Proper Status Codes
GET:
200 OK: Successful retrieval.
404 Not Found: When the resource doesn't exist.
POST:
201 Created: The resource was created successfully.
400 Bad Request: Invalid data provided in the request body.
DELETE:
200 OK: Successful deletion.
404 Not Found: The resource to delete doesn’t exist.
3. Data Validation
Always validate incoming data in POST requests using schemas or Pydantic models to avoid errors. This ensures you are receiving the data in the correct format before interacting with the database.
4. Handle Edge Cases for DELETE
When deleting, handle cases where the resource might not exist. For example:
Check if the resource exists before deleting.
Return a clear error message if trying to delete something that doesn’t exist (404).
5. Safe Fetching with GET
Ensure that GET requests are idempotent—they should not change the state of the server or modify any data.
Use pagination or filters to prevent retrieving large datasets with GET requests, as this can overload your server.
6. Use Meaningful Resource URLs
Always design RESTful URLs for resources:
GET /books/{book_id} to get a specific book.
POST /books/ to create a new book.
DELETE /books/{book_id} to delete a book.
7. Security Considerations
GET: Be cautious of exposing sensitive data in URLs (since they can be logged). Use query parameters for filters and searches, but avoid sending sensitive data in them.
POST: Ensure that sensitive information like passwords is encrypted (use hashing for passwords). Consider CSRF protection if needed.
DELETE: Ensure proper authorization before allowing a DELETE operation, especially for resources that belong to specific users.
8. Error Handling
Always return descriptive error messages for failed operations:
For GET, return 404 if the resource is not found.
For POST, if the request is invalid, return 400 Bad Request.
For DELETE, return 404 Not Found if the resource is not found to delete.
9. Use Middleware for Logging and Authorization
Implement logging or middleware to track requests for GET, POST, and DELETE operations, especially for sensitive data like deletions.
Add authorization checks to ensure users can only access, modify, or delete their own resources.
10. Test Your Endpoints
Write unit tests for each HTTP method to ensure your endpoints behave as expected, especially when handling edge cases (e.g., deleting non-existent resources).










